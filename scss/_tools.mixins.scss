/*------------------------------------*\
    #MIXINS
\*------------------------------------*/
/**
 * Here we can add mixins that's not imported with inuit.
 */


@mixin clearfix{
        &:before,
        &:after {
            content:"";
            display:table;
        }

       &:after {
            clear:both;
        }

        /* For IE 6/7 (trigger hasLayout) */
        & {
            *zoom:1;
        }
}


/*
Antaliased text
Use:

    .foo{
    @include antialiased;
    }


*/

@mixin antialiased{
    -webkit-font-smoothing: antialiased;
    -moz-font-smoothing: antialiased;
    -ms-font-smoothing: antialiased;
    -o-font-smoothing: antialiased;
    font-smoothing: antialiased;
}


/**
 * A simple top-to-bottom linear gradient with fallback color of our choice.
 */
@mixin linear-gradient($start-color, $stop-color, $fallback-color){
    background-color: $fallback-color; /* Old browsers */
    background-image: -moz-linear-gradient(top, $start-color 0%, $stop-color 100%); /* FF3.6+ */
    background-image: -webkit-gradient(linear, left top, left bottom, color-stop(0%,$start-color), color-stop(100%,$stop-color)); /* Chrome,Safari4+ */
    background-image: -webkit-linear-gradient(top, $start-color 0%,$stop-color 100%); /* Chrome10+,Safari5.1+ */
    background-image: -o-linear-gradient(top, $start-color 0%,$stop-color 100%); /* Opera 11.10+ */
    background-image: -ms-linear-gradient(top, $start-color 0%,$stop-color 100%); /* IE10+ */
    background-image: linear-gradient(to bottom, $start-color 0%,$stop-color 100%); /* W3C */
}


/*
BREAKPOINTS
via http://ahrengot.com/web-development/sass-breakpoint-mixin/
Use:
    .foo{
        @include bp(palm) { width: 80%;}
        @include bp(min-width, 1192px) { background: red;}
        @include bp-between(0, 1024px) { font-size: 1.3em;}
    }
*/



@mixin bp($point, $value: 0) {
    @if $point == mobile {
        @media (max-width: 380px) { @content; }
    }

    @else if $point == mobile-up {
        @media (min-width: 380px) { @content; }
    }

    @else if $point == palm {
        @media (min-width: 600px) { @content; }
    }

    @else if $point == palm-down {
         @media (max-width: 600px) { @content; }
    }

    @else if $point == lap {
        @media (min-width: 601px) and (max-width: 1023px) { @content; }
    }

    @else if $point == portable {
        @media (max-width: 1023px) { @content; }
    }

    @else if $point == desk {
        @media (min-width: 1024px) { @content; }
    }

    @else if $point == desk-large {
        @media (min-width: 1400px) { @content; }
    }

    @else {
        @media ($point: $value) { @content; }
    }
}

@mixin bp-between($min, $max) {
    @media (min-width: $min) and (max-width: $max) {
        @content;

    }
}



/*
KEYFRAME
Use:
    @include keyframe(fadeout) {
        0% {
            opacity: 1;
        }

        100% {
            opacity: 0;
        }
    }
*/


@mixin keyframe ($animation_name) {
    @-webkit-keyframes $animation_name {
        @content;
    }

    @-moz-keyframes $animation_name {
        @content;
    }

    @-o-keyframes $animation_name {
        @content;
    }

    @keyframes $animation_name {
        @content;
    }
}


/*
    ANIMATION
    use:
        .foo{
        @include animation(8s, 4s, fadeout)
        }
 */
@mixin animation ($delay, $duration, $animation) {
    -webkit-animation-delay: $delay;
    -webkit-animation-duration: $duration;
    -webkit-animation-name: $animation;
    -webkit-animation-fill-mode: forwards; /* this prevents the animation from restarting! */

    -moz-animation-delay: $delay;
    -moz-animation-duration: $duration;
    -moz-animation-name: $animation;
    -moz-animation-fill-mode: forwards; /* this prevents the animation from restarting! */

    -o-animation-delay: $delay;
    -o-animation-duration: $duration;
    -o-animation-name: $animation;
    -o-animation-fill-mode: forwards; /* this prevents the animation from restarting! */

    animation-delay: $delay;
    animation-duration: $duration;
    animation-name: $animation;
    animation-fill-mode: forwards; /* this prevents the animation from restarting! */
}


/*
* @include triangle within a pseudo element and add positioning properties (ie. top, left)
* $direction: up, down, left, right
* via http://hackingui.com/front-end/10-best-scss-utilities/
*/
@mixin triangle($direction, $size: 6px, $color: #222){
  content: '';
  display: block;
  position: absolute;
  height: 0; width: 0;
  @if ($direction == 'up'){
    border-bottom: $size solid $color;
    border-left: 1/2*$size solid transparent;
    border-right: 1/2*$size solid transparent;
  }
  @else if ($direction == 'down'){
    border-top: $size solid $color;
    border-left: 1/2*$size solid transparent;
    border-right: 1/2*$size solid transparent;
  }
  @else if ($direction == 'left'){
    border-top: 1/2*$size solid transparent;
    border-bottom: 1/2*$size solid transparent;
    border-right: $size solid $color;
  }
  @else if ($direction == 'right'){
    border-top: 1/2*$size solid transparent;
    border-bottom: 1/2*$size solid transparent;
    border-left: $size solid $color;
  }
}